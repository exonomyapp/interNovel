/**
 * Objects - Layout
 *
 * This file contains non-cosmetic layout patterns (OOCSS) that can be
 * reused across the application. These objects define positioning and
 * basic structure without adding visual styling.
 *
 * Layer: Objects (ITCSS)
 */

/**
 * .o-container
 *
 * A centered, responsive wrapper for page content. Adds horizontal
 * padding and max-width constraints to prevent content from spanning
 * the entire viewport on large screens.
 */
.o-container {
  max-width: $breakpoint-xl;  // Constrain width to the xl breakpoint
  margin-left: auto;
  margin-right: auto;
  padding-left: $spacing-4;
  padding-right: $spacing-4;
}

/**
 * .o-row
 *
 * A horizontal flex container for creating rows in a grid system.
 * Children (columns) will flow in a row with wrap support.
 */
.o-row {
  @include flex(row, flex-start, stretch, wrap);
  margin-left: -($spacing-2);
  margin-right: -($spacing-2);
}

/**
 * .o-col
 *
 * A flex item within .o-row. Allows setting proportional width
 * by specifying the number of columns in a 12-column grid.
 * Usage: <div class="o-col" style="flex: 0 0 50%"></div>
 */
.o-col {
  flex: 1 0 0%;
  padding-left: $spacing-2;
  padding-right: $spacing-2;
}

/**
 * .o-stack
 *
 * A vertical flex container for stacking elements with consistent spacing.
 * Use --gap modifier to adjust space between items.
 */
.o-stack {
  @include flex(column, flex-start, stretch, nowrap);
  & > * + * {
    margin-top: var(--gap, $spacing-4);
  }
}

/**
 * .o-hidden
 *
 * Utility object to hide elements visually but maintain layout space.
 */
.o-hidden {
  visibility: hidden;
}